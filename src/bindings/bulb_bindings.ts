/* Bindings typescript generated by archetype version: 1.2.13-rc0 */

import { MichelsonType } from '@taquito/michel-codec';
import { registerEvent, WellEvent, WellEventProcessor, hex_to_data } from '@completium/event-well-crank';

/* Event: SwitchOn */

export interface SwitchOn extends WellEvent {

}

const michelsonType_SwitchOn: MichelsonType =
{  "prim": "pair",
   "args": [
     {  "prim": "string",
        "annots": [
          "%_kind"
        ]
     },
     {  "prim": "unit"  }
   ]
};

function make_SwitchOn(input: string): SwitchOn | undefined {
  const data = hex_to_data(michelsonType_SwitchOn, input)

  if (data._kind !== 'SwitchOn') {
    return undefined;
  }
  return {
 }
}

export function register_SwitchOn(source : string, handler : WellEventProcessor<SwitchOn>) {
  registerEvent({ s: source, c: make_SwitchOn, p: handler })
}


/* Event: SwitchOff */

export interface SwitchOff extends WellEvent {

}

const michelsonType_SwitchOff: MichelsonType =
{  "prim": "pair",
   "args": [
     {  "prim": "string",
        "annots": [
          "%_kind"
        ]
     },
     {  "prim": "unit"  }
   ]
};

function make_SwitchOff(input: string): SwitchOff | undefined {
  const data = hex_to_data(michelsonType_SwitchOff, input)

  if (data._kind !== 'SwitchOff') {
    return undefined;
  }
  return {
 }
}

export function register_SwitchOff(source : string, handler : WellEventProcessor<SwitchOff>) {
  registerEvent({ s: source, c: make_SwitchOff, p: handler })
}
