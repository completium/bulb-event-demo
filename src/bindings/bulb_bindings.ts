/* Bindings typescript generated by archetype version: 1.2.14 */

import { registerEvent, WellEvent, WellEventProcessor, WellEventData } from '@completium/event-well-crank';

/* Event: SwitchOn */

export interface SwitchOn extends WellEvent {

}

const is_SwitchOn = (t : string) => {
  return t === 'SwitchOn'
}

const handle_SwitchOn = (handler : WellEventProcessor<SwitchOn>) => (event : any, data ?: WellEventData) => {
  handler({}, data)
}

export function register_SwitchOn(source : string, handler : WellEventProcessor<SwitchOn>) {
  registerEvent({ source: source, filter: is_SwitchOn, process: handle_SwitchOn(handler) })
}


/* Event: SwitchOff */

export interface SwitchOff extends WellEvent {

}

const is_SwitchOff = (t : string) => {
  return t === 'SwitchOff'
}

const handle_SwitchOff = (handler : WellEventProcessor<SwitchOff>) => (event : any, data ?: WellEventData) => {
  handler({}, data)
}

export function register_SwitchOff(source : string, handler : WellEventProcessor<SwitchOff>) {
  registerEvent({ source: source, filter: is_SwitchOff, process: handle_SwitchOff(handler) })
}
